WHITESPACE = _{ " " | "\r" | "\t" | "\n" }

uint = @{ ASCII_NONZERO_DIGIT ~ ("_"? ~ ASCII_DIGIT)* | "0"}
zint = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
int = @{"-"?~uint}
float = @{"-"?~uint~"."~zint*}
bool = @{"true" | "false"}
nil = @{"NIL"}
char = {"\\"?~ASCII}
string = @{(!"\""~char)*}
charwrapper = _{"'"~char~"'"}
stringwrapper = _{"\""~string~"\""}
literal_primitives = _{
    float|uint|int|bool|nil|charwrapper|stringwrapper
}
literal = _{literal_primitives}

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
keywords = @{
    "type" |
    "to" |
    "procedure" |
    "algorithm" |
    "endprocedure" |
    "function" |
    "in" |
    "if" |
    "then" |
    "else" |
    "endif" |
    "endfunction" |
    "program" |
    "konstant" |
    "kamus" |
    "algoritma" |
    "while" |
    "do" |
    "endwhile" |
    "array" |
    "of" |
    "endprogram"
}
integer_type = {"integer"}
real_type = {"real"}
bool_type = {"bool"}
char_type = {"char"}
string_type = {"string"}
void_type = {"void"}


primitives = _{
    integer_type |
    real_type |
    bool_type |
    string_type |
    char_type |
    void_type
}
pointer_type = {
    ("pointer" ~ "to" ~ typename)
}
zero_or_one = {("0"|"1")}
array_dim = {
	"[" ~zero_or_one~".."~uint~"]"
}
array_type = {
    ("array" ~ array_dim ~ "of" ~ typename)
}
user_type = @{ident}
typename = _{
    primitives 
    | array_type
    | pointer_type
    | user_type
}

const_type_field = {
    ident
    ~":"
    ~typename
    ~"="
    ~literal
}

type_def = {
    "type"
    ~ ident
    ~ ":"
    ~ "<"
    ~ (type_field ~ (","~type_field)*)?
    ~ ">"
}

kamus = {
    "kamus"
    ~type_field*
}

type_field = {
    (ident~(","~ident)*)
    ~":"
    ~typename
}

konstanta = {
    "konstanta"
    ~const_type_field*
}

param_io = {((^"in"~"/"~^"out")|^"in"|^"out")}

parameter = {
    param_io?
    ~ type_field
      
}

round_brackets_args = {
	"(" ~ (expr ~ (","~expr)* ~","?)? ~ ")"
}
square_brackets_args = {
	"[" ~ (expr ~ (","~expr)* ~","?)? ~ "]"
}
dot_arg = {
	"." ~ ident
}
linear_expr = { 
    ( ident | literal | enclosed_expr ) ~ (round_brackets_args|square_brackets_args|dot_arg)*
}
enclosed_expr = { "(" ~ expr ~ ")" }
ident = @{ !(literal~!ident) ~ (primitives?~keywords?~!NUMBER ~ (ASCII_ALPHANUMERIC | "_")+) }
expr =   { prefix? ~ primary ~ postfix? ~ (infix ~ prefix? ~ primary ~ postfix? )* }
infix =  _{ 
    add | sub | mul 
    | idv | div | pow | ge | gt
    | le | lt| equ | mdl
    | land | lor 
}
not = @{ "not" ~ !ident } // Logical Not
land = @{ "and" ~ !ident } // Logical And
lor = @{ "or" ~ !ident } // Logical Or
add = { "+" } // Addition
sub = { "-" } // Subtraction
mul = { "*" } // Multiplication
div = { "/" } // Division
idv = @{ "div" ~ !ident } // integer Division
mdl = @{ "mod" ~ !ident } // integer Division
neq = { "!=" } // Not Equal
equ = { "==" } // Equal
pow = { "^" } // Exponentiation
lt = { !"<-"~"<" } // Less than
le = { "<=" } // Less than or equal
gt = { ">" } // Greater than
ge = { ">=" } // Greater than or equal
prefix =  _{ neg | not } 
neg = { "-" } // Negation
postfix =  _{ !"nope"~"nope"}
primary =  _{  
	linear_expr
}

algoritma = {
    "algoritma"
    ~stmt*
}
procedure_def = {
    "procedure"
    ~ ident
    ~ "("
    ~ (parameter ~ (","~parameter)*)?
    ~ ")"
    ~konstanta?
    ~kamus?
    ~algoritma
    ~"endprocedure"
}

function_def = {
    "function"
    ~ ident
    ~ "("
    ~ (parameter ~ (","~parameter)*)?
    ~ ")"
    ~ "->"
    ~ typename
    ~konstanta?
    ~kamus?
    ~algoritma
    ~"endfunction"
}

typealias = {
    "type"
    ~ident 
    ~":"
    ~typename
}
retstmt = {
    "return" ~ expr
}

asgnstmt = {
    (linear_expr)
    ~ "<-"
    ~ expr
}
ifcond={expr}
ifstmt = {
    "if"
    ~ ifcond
    ~ "then"
    ~ stmt0
    ~ (
        (
            "else"~"if"
            ~ifcond
            ~"then"
            ~stmt0
        )*
        ~(
            "else"
            ~stmt0
        )?
    )?
    ~ "endif"
}
whlstmt = {
    "while"
    ~expr
    ~"do"
    ~stmt0
    ~"endwhile"
}
stmt0 = {stmt*}
stmt1 = {stmt+}
stmt = _{
    retstmt
    | ifstmt
    | asgnstmt
    | whlstmt
    | expr
}



mainprogram = {
    "program"
    ~ident
    ~konstanta?
    ~kamus?
    ~algoritma
    ~"endprogram"
}

program = _{
    WHITESPACE* ~ (
    procedure_def
    | function_def
    | type_def
    | typealias
    | mainprogram
    )*
}
